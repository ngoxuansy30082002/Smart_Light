/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: esp_rmaker_chal_resp.proto */

#ifndef PROTOBUF_C_esp_5frmaker_5fchal_5fresp_2eproto__INCLUDED
#define PROTOBUF_C_esp_5frmaker_5fchal_5fresp_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct RmakerChResp__CmdCRPayload RmakerChResp__CmdCRPayload;
typedef struct RmakerChResp__RespCRPayload RmakerChResp__RespCRPayload;
typedef struct RmakerChResp__CmdGetNodeIDPayload RmakerChResp__CmdGetNodeIDPayload;
typedef struct RmakerChResp__RespGetNodeIDPayload RmakerChResp__RespGetNodeIDPayload;
typedef struct RmakerChResp__RMakerChRespPayload RmakerChResp__RMakerChRespPayload;


/* --- enums --- */

typedef enum _RmakerChResp__RMakerChRespStatus {
  RMAKER_CH_RESP__RMAKER_CH_RESP_STATUS__Success = 0,
  RMAKER_CH_RESP__RMAKER_CH_RESP_STATUS__Fail = 1,
  RMAKER_CH_RESP__RMAKER_CH_RESP_STATUS__InvalidParam = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RMAKER_CH_RESP__RMAKER_CH_RESP_STATUS)
} RmakerChResp__RMakerChRespStatus;
typedef enum _RmakerChResp__RMakerChRespMsgType {
  RMAKER_CH_RESP__RMAKER_CH_RESP_MSG_TYPE__TypeCmdChallengeResponse = 0,
  RMAKER_CH_RESP__RMAKER_CH_RESP_MSG_TYPE__TypeRespChallengeResponse = 1,
  RMAKER_CH_RESP__RMAKER_CH_RESP_MSG_TYPE__TypeCmdGetNodeID = 2,
  RMAKER_CH_RESP__RMAKER_CH_RESP_MSG_TYPE__TypeRespGetNodeID = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RMAKER_CH_RESP__RMAKER_CH_RESP_MSG_TYPE)
} RmakerChResp__RMakerChRespMsgType;

/* --- messages --- */

struct  RmakerChResp__CmdCRPayload
{
  ProtobufCMessage base;
  ProtobufCBinaryData payload;
};
#define RMAKER_CH_RESP__CMD_CRPAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rmaker_ch_resp__cmd_crpayload__descriptor) \
, {0,NULL} }


struct  RmakerChResp__RespCRPayload
{
  ProtobufCMessage base;
  ProtobufCBinaryData payload;
  char *node_id;
};
#define RMAKER_CH_RESP__RESP_CRPAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rmaker_ch_resp__resp_crpayload__descriptor) \
, {0,NULL}, (char *)protobuf_c_empty_string }


struct  RmakerChResp__CmdGetNodeIDPayload
{
  ProtobufCMessage base;
};
#define RMAKER_CH_RESP__CMD_GET_NODE_IDPAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rmaker_ch_resp__cmd_get_node_idpayload__descriptor) \
 }


struct  RmakerChResp__RespGetNodeIDPayload
{
  ProtobufCMessage base;
  char *node_id;
};
#define RMAKER_CH_RESP__RESP_GET_NODE_IDPAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rmaker_ch_resp__resp_get_node_idpayload__descriptor) \
, (char *)protobuf_c_empty_string }


typedef enum {
  RMAKER_CH_RESP__RMAKER_CH_RESP_PAYLOAD__PAYLOAD__NOT_SET = 0,
  RMAKER_CH_RESP__RMAKER_CH_RESP_PAYLOAD__PAYLOAD_CMD_CHALLENGE_RESPONSE_PAYLOAD = 10,
  RMAKER_CH_RESP__RMAKER_CH_RESP_PAYLOAD__PAYLOAD_RESP_CHALLENGE_RESPONSE_PAYLOAD = 11,
  RMAKER_CH_RESP__RMAKER_CH_RESP_PAYLOAD__PAYLOAD_CMD_GET_NODE_IDPAYLOAD = 12,
  RMAKER_CH_RESP__RMAKER_CH_RESP_PAYLOAD__PAYLOAD_RESP_GET_NODE_IDPAYLOAD = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RMAKER_CH_RESP__RMAKER_CH_RESP_PAYLOAD__PAYLOAD__CASE)
} RmakerChResp__RMakerChRespPayload__PayloadCase;

struct  RmakerChResp__RMakerChRespPayload
{
  ProtobufCMessage base;
  RmakerChResp__RMakerChRespMsgType msg;
  RmakerChResp__RMakerChRespStatus status;
  RmakerChResp__RMakerChRespPayload__PayloadCase payload_case;
  union {
    RmakerChResp__CmdCRPayload *cmdchallengeresponsepayload;
    RmakerChResp__RespCRPayload *respchallengeresponsepayload;
    RmakerChResp__CmdGetNodeIDPayload *cmdgetnodeidpayload;
    RmakerChResp__RespGetNodeIDPayload *respgetnodeidpayload;
  };
};
#define RMAKER_CH_RESP__RMAKER_CH_RESP_PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rmaker_ch_resp__rmaker_ch_resp_payload__descriptor) \
, RMAKER_CH_RESP__RMAKER_CH_RESP_MSG_TYPE__TypeCmdChallengeResponse, RMAKER_CH_RESP__RMAKER_CH_RESP_STATUS__Success, RMAKER_CH_RESP__RMAKER_CH_RESP_PAYLOAD__PAYLOAD__NOT_SET, {0} }


/* RmakerChResp__CmdCRPayload methods */
void   rmaker_ch_resp__cmd_crpayload__init
                     (RmakerChResp__CmdCRPayload         *message);
size_t rmaker_ch_resp__cmd_crpayload__get_packed_size
                     (const RmakerChResp__CmdCRPayload   *message);
size_t rmaker_ch_resp__cmd_crpayload__pack
                     (const RmakerChResp__CmdCRPayload   *message,
                      uint8_t             *out);
size_t rmaker_ch_resp__cmd_crpayload__pack_to_buffer
                     (const RmakerChResp__CmdCRPayload   *message,
                      ProtobufCBuffer     *buffer);
RmakerChResp__CmdCRPayload *
       rmaker_ch_resp__cmd_crpayload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rmaker_ch_resp__cmd_crpayload__free_unpacked
                     (RmakerChResp__CmdCRPayload *message,
                      ProtobufCAllocator *allocator);
/* RmakerChResp__RespCRPayload methods */
void   rmaker_ch_resp__resp_crpayload__init
                     (RmakerChResp__RespCRPayload         *message);
size_t rmaker_ch_resp__resp_crpayload__get_packed_size
                     (const RmakerChResp__RespCRPayload   *message);
size_t rmaker_ch_resp__resp_crpayload__pack
                     (const RmakerChResp__RespCRPayload   *message,
                      uint8_t             *out);
size_t rmaker_ch_resp__resp_crpayload__pack_to_buffer
                     (const RmakerChResp__RespCRPayload   *message,
                      ProtobufCBuffer     *buffer);
RmakerChResp__RespCRPayload *
       rmaker_ch_resp__resp_crpayload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rmaker_ch_resp__resp_crpayload__free_unpacked
                     (RmakerChResp__RespCRPayload *message,
                      ProtobufCAllocator *allocator);
/* RmakerChResp__CmdGetNodeIDPayload methods */
void   rmaker_ch_resp__cmd_get_node_idpayload__init
                     (RmakerChResp__CmdGetNodeIDPayload         *message);
size_t rmaker_ch_resp__cmd_get_node_idpayload__get_packed_size
                     (const RmakerChResp__CmdGetNodeIDPayload   *message);
size_t rmaker_ch_resp__cmd_get_node_idpayload__pack
                     (const RmakerChResp__CmdGetNodeIDPayload   *message,
                      uint8_t             *out);
size_t rmaker_ch_resp__cmd_get_node_idpayload__pack_to_buffer
                     (const RmakerChResp__CmdGetNodeIDPayload   *message,
                      ProtobufCBuffer     *buffer);
RmakerChResp__CmdGetNodeIDPayload *
       rmaker_ch_resp__cmd_get_node_idpayload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rmaker_ch_resp__cmd_get_node_idpayload__free_unpacked
                     (RmakerChResp__CmdGetNodeIDPayload *message,
                      ProtobufCAllocator *allocator);
/* RmakerChResp__RespGetNodeIDPayload methods */
void   rmaker_ch_resp__resp_get_node_idpayload__init
                     (RmakerChResp__RespGetNodeIDPayload         *message);
size_t rmaker_ch_resp__resp_get_node_idpayload__get_packed_size
                     (const RmakerChResp__RespGetNodeIDPayload   *message);
size_t rmaker_ch_resp__resp_get_node_idpayload__pack
                     (const RmakerChResp__RespGetNodeIDPayload   *message,
                      uint8_t             *out);
size_t rmaker_ch_resp__resp_get_node_idpayload__pack_to_buffer
                     (const RmakerChResp__RespGetNodeIDPayload   *message,
                      ProtobufCBuffer     *buffer);
RmakerChResp__RespGetNodeIDPayload *
       rmaker_ch_resp__resp_get_node_idpayload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rmaker_ch_resp__resp_get_node_idpayload__free_unpacked
                     (RmakerChResp__RespGetNodeIDPayload *message,
                      ProtobufCAllocator *allocator);
/* RmakerChResp__RMakerChRespPayload methods */
void   rmaker_ch_resp__rmaker_ch_resp_payload__init
                     (RmakerChResp__RMakerChRespPayload         *message);
size_t rmaker_ch_resp__rmaker_ch_resp_payload__get_packed_size
                     (const RmakerChResp__RMakerChRespPayload   *message);
size_t rmaker_ch_resp__rmaker_ch_resp_payload__pack
                     (const RmakerChResp__RMakerChRespPayload   *message,
                      uint8_t             *out);
size_t rmaker_ch_resp__rmaker_ch_resp_payload__pack_to_buffer
                     (const RmakerChResp__RMakerChRespPayload   *message,
                      ProtobufCBuffer     *buffer);
RmakerChResp__RMakerChRespPayload *
       rmaker_ch_resp__rmaker_ch_resp_payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rmaker_ch_resp__rmaker_ch_resp_payload__free_unpacked
                     (RmakerChResp__RMakerChRespPayload *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RmakerChResp__CmdCRPayload_Closure)
                 (const RmakerChResp__CmdCRPayload *message,
                  void *closure_data);
typedef void (*RmakerChResp__RespCRPayload_Closure)
                 (const RmakerChResp__RespCRPayload *message,
                  void *closure_data);
typedef void (*RmakerChResp__CmdGetNodeIDPayload_Closure)
                 (const RmakerChResp__CmdGetNodeIDPayload *message,
                  void *closure_data);
typedef void (*RmakerChResp__RespGetNodeIDPayload_Closure)
                 (const RmakerChResp__RespGetNodeIDPayload *message,
                  void *closure_data);
typedef void (*RmakerChResp__RMakerChRespPayload_Closure)
                 (const RmakerChResp__RMakerChRespPayload *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    rmaker_ch_resp__rmaker_ch_resp_status__descriptor;
extern const ProtobufCEnumDescriptor    rmaker_ch_resp__rmaker_ch_resp_msg_type__descriptor;
extern const ProtobufCMessageDescriptor rmaker_ch_resp__cmd_crpayload__descriptor;
extern const ProtobufCMessageDescriptor rmaker_ch_resp__resp_crpayload__descriptor;
extern const ProtobufCMessageDescriptor rmaker_ch_resp__cmd_get_node_idpayload__descriptor;
extern const ProtobufCMessageDescriptor rmaker_ch_resp__resp_get_node_idpayload__descriptor;
extern const ProtobufCMessageDescriptor rmaker_ch_resp__rmaker_ch_resp_payload__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_esp_5frmaker_5fchal_5fresp_2eproto__INCLUDED */
